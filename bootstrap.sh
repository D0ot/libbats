#!/bin/sh

if [ "x$1" = "xclean" ]; then
	echo Cleaning
	echo DONDOODODNODNODNODNODNO
	make distclean
  rm -f confi
  rm -rf autom4te.cache config.aux m4
	exit
fi


LNAME=libbats

echo "Generating CMakeFiles.txt"

SOURCES=`find . -name '*.cc' | grep -v examples | grep -v GtkDebugger`
HEADERS=`find . -name '*.hh' | grep -v examples`
IHEADERS=`find . -name '*.ih' | tr '\n' ' '`
XML=`ls xml/*.xml |  tr '\n' ' '`

#CMakeLists.txt
cat > CMakeLists.txt <<EOF
#
## This file is generated by bootstrap.sh. Edit that file, not this
#

cmake_minimum_required (VERSION 2.6)
project ($LNAME)

set(CMAKE_MODULE_PATH \${CMAKE_SOURCE_DIR}/cmake/)
set(BUILD_SHARED_LIBS ON CACHE BOOL "Choose whether to build a shared library")

INCLUDE(FindPkgConfig)

find_package(Eigen3 REQUIRED)
find_package(LibXml2 REQUIRED)
find_package(SigC++ REQUIRED)
PKG_CHECK_MODULES(GTKMM, gtkmm-2.4)
#find_package(GTKmm REQUIRED)

set(CMAKE_CXX_FLAGS "-std=c++0x")

#
## libbats
#

set(LIBBATS_SOURCES
${SOURCES}
)

set(LIBBATS_INCLUDE_DIRS \${EIGEN3_INCLUDE_DIR} \${LIBXML2_INCLUDE_DIR} \${SigC++_INCLUDE_DIRS})

# Don't build Gtk
if(GTKMM_FOUND)
  list(APPEND LIBBATS_SOURCES
       ./Debugger/GtkDebugger/onDebugText.cc./Debugger/GtkDebugger/run.cc ./Debugger/GtkDebugger/onThinkEnd.cc ./Debugger/GtkDebugger/drawShapes.cc ./Debugger/GtkDebugger/GtkDebugger.cc ./Debugger/GtkDebugger/drawBall.cc ./Debugger/GtkDebugger/drawCurve.cc ./Debugger/GtkDebugger/plot.cc ./Debugger/GtkDebugger/drawPlayers.cc ./Debugger/GtkDebugger/start.cc ./Debugger/GtkDebugger/drawSelf.cc ./Debugger/GtkDebugger/init.cc ./Debugger/GtkDebugger/drawField.cc ./Debugger/GtkDebugger/reDraw.cc ./Debugger/GtkDebugger/onDrawingAreaExpose.cc
  )

  list(APPEND LIBBATS_INCLUDE_DIRS ${GTKMM_INCLUDE_DIRS})
else(GTKMM_FOUND)
  message(STATUS "  GtkDebugger will not be built")
endif(GTKMM_FOUND)

include_directories(\${LIBBATS_INCLUDE_DIRS})

add_library(bats
\${LIBBATS_SOURCES}
)

install(TARGETS bats DESTINATION lib)

add_subdirectory(examples)

EOF

echo "Generating examples/CMakeLists.txt"
cat > examples/CMakeLists.txt <<EOF
#
## This file is generated by bootstrap.sh. Edit that file, not this
#

add_subdirectory(helloworld)
add_subdirectory(dribble)

EOF

echo "Generating examples/helloworld/CMakeLists.txt"
cat > examples/helloworld/CMakeLists.txt <<EOF
#
## This file is generated by bootstrap.sh. Edit that file, not this
#

include_directories(\${CMAKE_SOURCE_DIR})

set(HELLOWORLD_SOURCES
helloworld.cc
HelloWorldAgent/init.cc
HelloWorldAgent/think.cc
)

add_executable(helloworld
\${HELLOWORLD_SOURCES}
)


target_link_libraries(helloworld bats \${LIBXML2_LIBRARIES} \${SigC++_LIBRARIES})

EOF

echo "Generating examples/dribble/CMakeLists.txt"
cat > examples/dribble/CMakeLists.txt <<EOF
#
## This file is generated by bootstrap.sh. Edit that file, not this
#

include_directories(\${CMAKE_SOURCE_DIR})

set(DRIBBLE_SOURCES
dribble.cc
DribbleAgent/init.cc
DribbleAgent/think.cc
DribbleAgent/determineWhereToLook.cc
DribbleAgent/determineWhereToWalk.cc
)

add_executable(dribble
\${DRIBBLE_SOURCES}
)


target_link_libraries(dribble bats \${LIBXML2_LIBRARIES} \${SigC++_LIBRARIES})

EOF

exit

# docs Makefile.am
cat > docs/Makefile.am <<EOF
EXTRA_DIST = header.html footer.html doxygen.css mainpage.txt
SUBDIRS = manual
EOF

# manual Makefile.am
cat > docs/manual/Makefile.am <<EOF
#THIS FILE IS AUTOMATICALLY GENERATED BY bootstrap.sh
# DO NOT EDIT THIS, BUT EDIT THAT
if COND_PDFLATEX
%.toc: %.tex
	touch \$@
	pdflatex \$<

%.pdf: %.tex %.toc 
	pdflatex \$<

all-local:
	\$(MAKE) \$(AM_MAKEFLAGS) libbatsmanual.pdf
	
EXTRA_DIST = libbatsmanual.pdf
CLEANFILES = manual.log manual.pdf manual.aux manual.toc manual.bib manual.dvi manual.out
endif
EOF

# examples Makefile.am
cat > examples/Makefile.am <<EOF
SUBDIRS = helloworld
EOF

# helloworld Makefile.am
cat > examples/helloworld/Makefile.am <<EOF
AM_CPPFLAGS = -DBATS_NO_DEBUG -DDATADIR="\$(pkgdatadir)" -I../.. \$(DEPS_CFLAGS) -I/usr/include/eigen2
AM_LDFLAGS = ../../libbats.la \$(DEPS_LIBS)

noinst_PROGRAMS = helloworld
noinst_HEADERS = HelloWorldAgent/helloworldagent.hh HelloWorldAgent/helloworldagent.ih
helloworld_SOURCES = HelloWorldAgent/init.cc HelloWorldAgent/think.cc helloworld.cc
EOF

rm -f config.cache acconfig.h

echo "- libtoolize."    && \
((which libtoolize && libtoolize) || (which glibtoolize && glibtoolize)) && \
echo "- aclocal."		&& \
aclocal	&& \
echo "- autoconf."		&& \
autoconf			&& \
echo "- automake."		&& \
automake --add-missing --copy

